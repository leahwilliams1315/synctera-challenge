{"version":3,"sources":["utils.js","components/AppDialog.js","components/TransactionFilterDropdown.js","App.js","reportWebVitals.js","index.js"],"names":["dateFormatter","dateString","Intl","DateTimeFormat","year","month","day","format","Date","amountFormatter","amount","toFixed","Transition","forwardRef","props","ref","Zoom","AppDialog","useState","isOpen","open","setOpen","useEffect","handleClose","onClose","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","DialogContentText","id","className","Description","Category","DialogActions","Button","onClick","color","TransactionFilterDropdown","options","selectedOption","onChange","FormControl","style","minWidth","InputLabel","Select","labelId","value","renderValue","label","map","option","MenuItem","App","transactions","updateTransactions","selectedTransaction","updateSelectedTransaction","selectedFilterOption","updateSelectedFilterOption","fetch","then","result","json","transactionResp","filter","r","columns","filterOptions","transaction","index","list","frequencyMap","reduce","acc","next","Object","entries","sort","a","b","slice","subArr","includes","Debit","Credit","AppBar","position","Toolbar","display","justifyContent","Typography","variant","event","target","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","fontWeight","TableBody","cursor","hover","Boolean","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4adfdab8.chunk.js","sourcesContent":["\nexport const dateFormatter = (dateString) =>\n  new Intl.DateTimeFormat('en-US', {year: 'numeric', month: 'long', day: 'numeric'})\n    .format(new Date(dateString));\n\nexport const amountFormatter = (amount) => amount ? `$${amount.toFixed(2)}` : '';\n\n","import Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { forwardRef, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Zoom from '@material-ui/core/Zoom';\nimport { amountFormatter, dateFormatter } from '../utils';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Zoom ref={ref} {...props} />;\n});\n\nexport const AppDialog = (props) => {\n\n  const [open, setOpen] = useState(props.isOpen);\n\n  useEffect(() => {\n    setOpen(props.isOpen);\n  }, [props.isOpen]);\n\n  const handleClose = () => {\n    setOpen(false);\n    props.onClose();\n  };\n  return (\n    <Dialog\n      open={open}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n    >\n      <DialogTitle>\n        Transaction Details\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {props.id ? <div className=\"content-container\">\n           <div className=\"content-row\">\n             <div className=\"content-label\">Transaction Date:</div>\n             <div>{dateFormatter(props['Transaction-Date'])}</div>\n           </div>\n            <div className=\"content-row\">\n              <div className=\"content-label\">Description:</div>\n              <div>{props.Description}</div>\n            </div>\n            <div className=\"content-row\">\n              <div className=\"content-label\">Category:</div>\n              <div>{props.Category}</div>\n            </div>\n            <div className=\"content-row\">\n              <div className=\"content-label\">Amount:</div>\n              <div>{amountFormatter(props.amount)}</div>\n            </div>\n          </div> : ''}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n};\n\n\n","import InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nexport const TransactionFilterDropdown = ({options, selectedOption, onChange}) => (\n  <FormControl style={{ minWidth: 270 }}>\n    <InputLabel style={{color: 'white'}} id=\"filter-select\">Filter by...</InputLabel>\n    <Select\n      style={{color: 'white'}}\n      labelId=\"filter-select\"\n      value={selectedOption || ''}\n      renderValue={() => selectedOption ? selectedOption.label : null}\n      onChange={onChange}\n    >\n      { options.map(option => <MenuItem\n        key={option.label}\n        value={option}>{option.label}\n        </MenuItem>)\n      }\n    </Select>\n  </FormControl>\n);\n\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport { AppDialog } from './components/AppDialog';\nimport { TransactionFilterDropdown } from './components/TransactionFilterDropdown';\nimport { amountFormatter, dateFormatter } from './utils';\n\nfunction App() {\n\n  const baseURL = 'https://sampleapis.com/fakebank/api/Accounts';\n  const [transactions, updateTransactions] = useState([]);\n  const [selectedTransaction, updateSelectedTransaction] = useState(null);\n  const [selectedFilterOption, updateSelectedFilterOption] = useState(null);\n\n  useEffect(() => {\n      fetch(baseURL)\n        .then(result => result.json())\n        .then((transactionResp) => updateTransactions(transactionResp.filter(r => r['Transaction-Date'])));\n    }\n    , []);\n\n  const columns = [\n    {id: 'Transaction-Date', label: 'Transaction Date', minWidth: 170, format: dateFormatter},\n    {id: 'Description', label: 'Description', minWidth: 300},\n    {id: 'Debit', label: 'Withdrawal', minWidth: 50, format: amountFormatter},\n    {id: 'Credit', label: 'Deposit', minWidth: 50, format: amountFormatter},\n  ];\n\n  const filterOptions = [\n    {\n      label: 'All',\n      value: () => true\n    },\n    {\n      label: 'Top 10 Merchants',\n      value: (transaction, index, list) => {\n        const frequencyMap = list.reduce((acc, next) => {\n          return {\n            ...acc,\n            [next.Description]: acc[next.Description] ? acc[next.Description] + 1 : 1\n          }\n        }, {});\n        const sortedFrequency =\n          Object.entries(frequencyMap)\n            .sort((a,b) => b[1] - a[1])\n            .slice(0, 10)\n            .map(subArr => subArr[0]);\n\n        return sortedFrequency.includes(transaction.Description);\n      }\n    },\n    {\n      label: 'Top 10 by amount',\n      value: (transaction, index, list) => {\n        const sortedByAmount =\n          list\n            .sort((a,b) => (b.Debit || b.Credit) - (a.Debit || a.Credit))\n            .slice(0, 10)\n            .map(transaction => transaction.id);\n\n        return sortedByAmount.includes(transaction.id);\n      }\n    },\n    {\n      label: 'Top 3 Categories by amount',\n      value: (transaction, index, list) => {\n        const frequencyMap = list.reduce((acc, next) => {\n          return {\n            ...acc,\n            [next.Category]: acc[next.Category] ? acc[next.Category] + (next.Debit || next.Credit) : (next.Debit || next.Credit)\n          }\n        }, {});\n        const sortedFrequency =\n          Object.entries(frequencyMap)\n            .sort((a,b) => b[1] - a[1])\n            .slice(0, 3)\n            .map(subArr => subArr[0]);\n\n        return sortedFrequency.includes(transaction.Category);\n      }\n    }\n  ];\n\n  return (\n    <div className=\"app\">\n      <AppBar position=\"static\">\n        <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n          <Typography variant=\"h6\">\n            Synctera\n          </Typography>\n          <TransactionFilterDropdown\n            options={filterOptions}\n            selectedOption={selectedFilterOption}\n            onChange={(event) => updateSelectedFilterOption(event.target.value)}/>\n        </Toolbar>\n      </AppBar>\n      <div className=\"app-content\">\n\n        <Paper className=\"paper\">\n          <TableContainer className=\"container\">\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      style={{minWidth: column.minWidth, fontWeight: '900'}}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {\n                  [...transactions]\n                    .filter(selectedFilterOption ? selectedFilterOption.value : () => true)\n                    .sort((a, b) => b['Transaction-Date'] > a['Transaction-Date'] ? 1 : -1)\n                    .map((transaction) =>\n                      <TableRow\n                        onClick={() => {\n                          updateSelectedTransaction(transaction)\n                        }}\n                        style={{cursor: 'pointer'}}\n                        hover={true}\n                        key={transaction.id}\n                      >\n                        {columns.map((column) =>\n                          <TableCell\n                            key={column.id}\n                            style={{minWidth: column.minWidth}}\n                          >\n                            {column.format ? column.format(transaction[column.id]) : transaction[column.id]}\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </div>\n\n      <AppDialog\n        isOpen={Boolean(selectedTransaction)}\n        {...(selectedTransaction || {})}\n        amount={selectedTransaction ? (selectedTransaction.Debit || selectedTransaction.Credit) : 0}\n        onClose={() => updateSelectedTransaction(null)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}